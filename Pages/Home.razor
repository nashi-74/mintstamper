@page "/{emotestring?}"
@using System.Text.RegularExpressions
@using System.Text.Json;
@using mintstamper.Models;
@inject ICensorService censorService
@inject IStampParserService stampParserService

<PageTitle>Mintstamper</PageTitle>

<StampInput @bind-ChildData=inputText @bind-ChildData:after=ProcessTextInput />
<ConversionSettings EmoteString="@EmoteString" EmoteStringChangedEvent="UpdateEmoteString" CensorSettingsChangedEvent="UpdateCensorMode" BreakSettingsChangedEvent="UpdateBreakSettings" StackStringChangedEvent="UpdateStackString" />
<HighlightedStampOutput Stamps=stamps BreakSettings="BreakSettings" />

@code {
    [Parameter]
    public string? EmoteString { get; set; } //value received from the url
    private string emoteString => string.IsNullOrEmpty(EmoteString) ? "memboo" : EmoteString; //verified and bound to the ConversionSettings textbox

    private int censorMode = 0; //censor - 0, highlight - 1, ignore - 2

    public BreakSettings BreakSettings { get; set; } = new BreakSettings("60", false);

    public int StackHighlightInterval { get; set; } = 45;

    private string inputText { get; set; } = string.Empty;
    private string outputText { get; set; } = string.Empty;
    private List<Stamp> stamps { get; set; } = [];


    private void ProcessTextInput()
    {
        outputText = Regex.Replace(inputText, @":([a-zA-Z]+)~\d+:", @":$1:"); //removing server suffixes from emotes (:emote~number: -> :emote:)
        outputText = outputText.Replace((string.IsNullOrEmpty(emoteString) ? ":memboo" : ":" + emoteString), ":_"); //replacing the emote strings
        outputText = outputText.Replace("#", "# "); //fixing hashtags


        outputText = Regex.Replace(outputText, @"w{3,}", "ww"); //trimming wwwwwws
        outputText = Regex.Replace(outputText, @"W{3,}", "WW"); //trimming WWWWWWs


        //separating out HBDs, highlighting lines
        stamps = stampParserService.ParseStamps(outputText, StackHighlightInterval);

        //profanity filter (censor mode)
        if (censorMode == 0)
        {
            stamps = censorService.CensorText(stamps);
        }
        //profanity filter (highlight mode)
        if (censorMode == 1)
        {
            stamps = censorService.HighlightFilteredWords(stamps);
        }
    }

    //set EmoteString if no parameter received by url
    protected override void OnInitialized() { if (string.IsNullOrEmpty(EmoteString)) EmoteString = "memboo"; }

    //called by event in ConversionSettings upon modifying the textbox content
    private void UpdateEmoteString(string newEmoteString) { EmoteString = newEmoteString; ProcessTextInput(); }

    //called by event in ConversionSettings upon selecting a new censor mode
    private void UpdateCensorMode(string newCensorMode) {
        censorMode = Convert.ToInt16(newCensorMode); ProcessTextInput(); }

    //called whenever the break checkbox state is changed or a new break length value is set
    private void UpdateBreakSettings(string serializedSettings) {
        BreakSettings = JsonSerializer.Deserialize<BreakSettings>(serializedSettings) ?? new BreakSettings("60", false);
        if (BreakSettings.Enabled) ProcessTextInput();
    }

    //called whenever the stack interval textbox value is set
    private void UpdateStackString(string stackString)
    {
        StackHighlightInterval = Convert.ToInt16(stackString);
        ProcessTextInput();
    }
}